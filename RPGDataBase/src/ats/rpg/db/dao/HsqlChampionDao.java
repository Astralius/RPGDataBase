package ats.rpg.db.dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ats.rpg.db.DaoBase;
import ats.rpg.db.EntityBase;
import ats.rpg.db.HsqlUnitOfWork;
import ats.rpg.entities.Champion;
import ats.rpg.util.Profession;


public class HsqlChampionDao extends DaoBase<Champion> implements ChampionDao {

	private Statement stmt;

	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement select;
	private PreparedStatement selectId;
	
	InventorySlotDao inventoryDao;
	
	
	public HsqlChampionDao(HsqlUnitOfWork uow)
	{
		super(uow);
		try {
			Connection connection = uow.getConnection();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean exist = false;
			
			stmt = connection.createStatement();
			
			while(rs.next())
			{
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("Champion"))
				{
					exist = true;
					break;
				}
			}
			if(!exist)
			{
				stmt.executeUpdate("CREATE TABLE Champion("
						+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
						+ "name VARCHAR(50),"
						+ "level INT,"
						+ "profession VARCHAR(50),"
						+ "HP INT,"
						+ "MP INT,"
						+ "coins INT,"
						+ "account_id BIGINT FOREIGN KEY "
						+ "REFERENCES Account ON UPDATE CASCADE ON DELETE CASCADE,"
						+ "place_id BIGINT FOREIGN KEY "
						+ "REFERENCES Place ON UPDATE CASCADE ON DELETE CASCADE"
						+ ")");
			}
			
			insert = connection.prepareStatement(""
					+ "insert into Champion(name,level,profession,HP,MP,coins) "
					+ "values (?,?,?,?,?,?)");
			
			update = connection.prepareStatement(""
					+ "update Champion set"
					+ "(name,level,profession,HP,MP,coins)=(?,?,?,?,?,?)"
					+ "where id=?");
			
			delete = connection.prepareStatement(""
					+ "delete from Champion where id=?");
			
			selectId = connection.prepareStatement(""
					+ "select * from Champion where id=?");
			
			select = connection.prepareStatement(""
					+ "select * from Champion");
			
		} catch (SQLException e) {			
			e.printStackTrace();
		}	
	}
	
	public void persistAdd(EntityBase entity) {
	
		Champion ent = (Champion) entity;
		try 
		{
			insert.setString(1, ent.getName());
			insert.setInt(2, ent.getLevel());
			insert.setString(3, ent.getProfession());
			insert.setInt(4, ent.getHP());	
			insert.setInt(5, ent.getMP());
			insert.setInt(6, ent.getCoins());
			insert.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void persistDelete(EntityBase entity) {
		
		Champion ent = (Champion) entity;
		try 
		{
			delete.setLong(1, ent.getId());
			
			delete.executeUpdate();	
			
		} catch (SQLException e) {
			e.printStackTrace();
		}	
	}

	public List<Champion> getAll() {
		
		List<Champion> champions = new ArrayList<Champion>();
		
		try
		{
			ResultSet rs = select.executeQuery();
			
			while(rs.next()){
				Champion c = new Champion();
				c.setId(rs.getLong("id"));
				c.setName(rs.getString("name"));
				c.setId(rs.getInt("level"));
				c.setProfession(Profession.valueOf(rs.getString("profession")));
				c.setId(rs.getInt("HP"));
				c.setId(rs.getInt("MP"));
				c.setId(rs.getInt("coins"));
				champions.add(c);
			}
			return champions;
		}
		catch(Exception ex) {
			ex.printStackTrace();
		}
		
		return null;
	}
	
	public Champion get(int id) {
		
		try {
			selectId.setInt(1, id);
			ResultSet rs = selectId.executeQuery();
			while(rs.next()) {
				Champion c = new Champion();
				c.setId(rs.getLong("id"));
				c.setName(rs.getString("name"));
				c.setId(rs.getInt("level"));
				c.setProfession(Profession.valueOf(rs.getString("profession")));
				c.setId(rs.getInt("HP"));
				c.setId(rs.getInt("MP"));
				c.setId(rs.getInt("coins"));
				return c;
			}	
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return null;
	}

	public void persistUpdate(EntityBase entity) {

		Champion ent = (Champion) entity;
		try
		{
			update.setString(1, ent.getName());
			update.setInt(2, ent.getLevel());
			update.setString(3, ent.getProfession());
			update.setInt(4, ent.getHP());
			update.setInt(5, ent.getMP());
			update.setInt(6, ent.getCoins());
			update.setLong(7, ent.getId());
			update.executeUpdate();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}	
	}

	@Override
	public void setInventorySlots(Champion c) {
		c.setInventorySlots(inventoryDao.getInventorySlotsByChampionId(c.getId()));
	}

	@Override
	public List<Champion> getChampionsByAccountId(long id) {
		
		List<Champion> champions = new ArrayList<Champion>();
		try {
			ResultSet rs = select.executeQuery();
			while(rs.next()) {
				if(rs.getLong("account_id") == id) {
					Champion c = new Champion();
					c.setId(rs.getLong("id"));
					c.setName(rs.getString("name"));
					c.setId(rs.getInt("level"));
					c.setProfession(Profession.valueOf(rs.getString("profession")));
					c.setId(rs.getInt("HP"));
					c.setId(rs.getInt("MP"));
					c.setId(rs.getInt("coins"));
					champions.add(c);
				}
			}
			return champions;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<Champion> getChampionsByPlaceId(long id) {
		
		List<Champion> champions = new ArrayList<Champion>();
		try {
			ResultSet rs = select.executeQuery();
			while(rs.next()) {
				if(rs.getLong("place_id") == id) {
					Champion c = new Champion();
					c.setId(rs.getLong("id"));
					c.setName(rs.getString("name"));
					c.setId(rs.getInt("level"));
					c.setProfession(Profession.valueOf(rs.getString("profession")));
					c.setId(rs.getInt("HP"));
					c.setId(rs.getInt("MP"));
					c.setId(rs.getInt("coins"));
					champions.add(c);
				}
			}
			return champions;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

}