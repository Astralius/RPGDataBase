package ats.rpg.db.hsql;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ats.rpg.db.DaoBase;
import ats.rpg.db.EntityBase;
import ats.rpg.db.dao.AccountDao;
import ats.rpg.db.dao.ChampionDao;
import ats.rpg.entities.Account;


public class HsqlAccountDao extends DaoBase<Account> implements AccountDao {
	
	private Statement stmt;
	
	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement select;
	private PreparedStatement selectId;
	private PreparedStatement drop;
	
	
	public HsqlAccountDao(HsqlUnitOfWork uow)
	{
		super(uow);
		try {
			Connection connection = uow.getConnection();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean exist = false;
			
			stmt = connection.createStatement();
			
			while(rs.next())
			{
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("Account"))
				{
					exist = true;
					break;
				}
			}
			if(!exist)
			{
				stmt.executeUpdate("CREATE TABLE Account("
						+ "id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 0),"
						+ "login VARCHAR(50) NOT NULL UNIQUE,"
						+ "password VARCHAR(50) NOT NULL,"
						+ "email VARCHAR(50) NOT NULL,"
						+ "creation_date DATE"
						+ ")");
			}
			
			insert = connection.prepareStatement(""
					+ "insert into Account(login,password,email,creation_date) "
					+ "values (?,?,?,?)");
			
			update = connection.prepareStatement(""
					+ "update Account set"
					+ "(login,password,email,creation_date)=(?,?,?,?)"
					+ "where id=?");
			
			delete = connection.prepareStatement(""
					+ "delete from Account where id=?");
			
			selectId = connection.prepareStatement(""
					+ "select * from Account where id=?");
			
			select = connection.prepareStatement(""
					+ "select * from Account");
			
			drop = connection.prepareStatement(""
					+ "drop table Account");
			
		} catch (SQLException e) {			
			e.printStackTrace();
		}	
	}
	
	public void persistAdd(EntityBase entity) {
	
		Account ent = (Account) entity;
		try 
		{
			insert.setString(1, ent.getLogin());			// Not Null
			insert.setString(2, ent.getPassword());			// Not Null
			insert.setString(3, ent.getEmail());			// Not Null
			insert.setDate(4, ent.getCreationDate());		// auto	
			insert.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void persistDelete(EntityBase entity) {
		
		Account ent = (Account) entity;
		try 
		{
			delete.setLong(1, ent.getId());		
			delete.executeUpdate();	
			
		} catch (SQLException e) {
			e.printStackTrace();
		}	
	}

	@Override
	public Account get(long id) {
		
		try {
			selectId.setLong(1, id);
			ResultSet rs = selectId.executeQuery();
			while(rs.next()) {
				Account a = new Account();
					a.setId(rs.getLong("id"));
					a.setLogin(rs.getString("login"));
					a.setPassword(rs.getString("password"));
					a.setEmail(rs.getString("email"));
					a.setCreationDate(rs.getDate("creation_date"));
				return a;
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;	// może wystąpić, jeśli konto o podanym id nie istnieje
	}

	@Override
	public List<Account> getAll() {
		
		List<Account> accounts = new ArrayList<Account>();
		
		try
		{
			ResultSet rs = select.executeQuery();
			while(rs.next()){
				Account a = get(rs.getLong("id"));
				accounts.add(a);
			}
			return accounts;
		}
		catch(SQLException ex) {
			ex.printStackTrace();
		}
		return null;	// może wystąpić, jeśli nie ma żadnych kont
	}

	public void persistUpdate(EntityBase entity) {

		Account ent = (Account) entity;
		try
		{
			update.setString(1, ent.getLogin());
			update.setString(2, ent.getPassword());
			update.setString(3, ent.getEmail());
			update.setDate(4, ent.getCreationDate());
			update.setLong(5, ent.getId());
			update.executeUpdate();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}	
	}

	@Override
	public void setChampions(Account a, ChampionDao dao) {
		a.setChampions(dao.getChampionsByAccountId(a.getId()));
	}
	
	@Override
	public void drop() {
		try {
			drop.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}