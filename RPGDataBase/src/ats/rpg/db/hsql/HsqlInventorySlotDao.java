package ats.rpg.db.hsql;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ats.rpg.db.dao.ChampionDao;
import ats.rpg.db.dao.InventorySlotDao;
import ats.rpg.db.dao.ItemDao;
import ats.rpg.entities.InventorySlot;


public class HsqlInventorySlotDao extends HsqlDaoBase<InventorySlot> 
	implements InventorySlotDao {

	
	public HsqlInventorySlotDao(HsqlUnitOfWork uow) {
		super(uow);
	}
	
	@Override
	public InventorySlot[] getInventorySlotsByChampionId(long id) {

		InventorySlot[] inventorySlots = new InventorySlot[6];
		
		try {
			ResultSet rs = select.executeQuery();
			int index = 0;
			while(rs.next()) {
				if(rs.getLong("champion_id") == id) {
					InventorySlot i = get(rs.getLong("id"));
					inventorySlots[index++] = i;
				}
			}
			return inventorySlots;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	@Override
	public List<InventorySlot> getInventorySlotsByItemId(long id) {

		List<InventorySlot> inventorySlots = new ArrayList<InventorySlot>();
		
		try {
			ResultSet rs = select.executeQuery();
			while(rs.next()) {
				if(rs.getLong("item_id") == id) {
					InventorySlot i = get(rs.getLong("id"));
					inventorySlots.add(i);
				}		
			}
			return inventorySlots;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void setChampion(InventorySlot i, ChampionDao dao) {
		try {
			selectId.setLong(1, i.getId());
			ResultSet rs = selectId.executeQuery();
			rs.next();
			i.setChampion(dao.get(rs.getLong("champion_id")));
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void setItem(InventorySlot i, ItemDao dao) {
		try {
			selectId.setLong(1, i.getId());
			ResultSet rs = selectId.executeQuery();
			rs.next();
			i.setItem(dao.get(rs.getLong("item_id")));
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	protected String getTableName() {
		return "InventorySlots";
	}

	@Override
	protected String getCreateQuery() {
		return "CREATE TABLE InventorySlots("
				+ "id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 0),"
				+ "champion_id BIGINT NOT NULL FOREIGN KEY "
				+ "REFERENCES Champion(id) ON UPDATE CASCADE ON DELETE CASCADE,"
				+ "item_id BIGINT NOT NULL FOREIGN KEY "
				+ "REFERENCES Item(id) ON UPDATE CASCADE ON DELETE CASCADE"
				+ ")";
	}

	@Override
	protected InventorySlot build(ResultSet rs) throws SQLException {
		InventorySlot i = new InventorySlot();
			i.setId(rs.getLong("id"));
		return i;
	}

	@Override
	protected String getInsertQuery() {
		return "insert into InventorySlots(item_id,champion_id) "
				+ "values (?,?)";
	}

	@Override
	protected void setInsertQuery(InventorySlot ent) throws SQLException {
		insert.setLong(1, ent.getItem().getId());			// Not Null
		insert.setLong(2, ent.getChampion().getId());		// Not Null
		insert.executeUpdate();
	}

	@Override
	protected String getUpdateQuery() {
		return "update InventorySlots set"
				+ "(item_id,champion_id)=(?,?)"
				+ "where id=?";
	}

	@Override
	protected void setUpdateQuery(InventorySlot ent) throws SQLException {
		update.setLong(1, ent.getItem().getId());
		update.setLong(2, ent.getChampion().getId());
		update.setLong(3, ent.getId());
		update.executeUpdate();
	}
	
}