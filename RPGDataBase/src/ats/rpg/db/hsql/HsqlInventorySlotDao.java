package ats.rpg.db.hsql;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ats.rpg.db.DaoBase;
import ats.rpg.db.EntityBase;
import ats.rpg.db.dao.ChampionDao;
import ats.rpg.db.dao.InventorySlotDao;
import ats.rpg.db.dao.ItemDao;
import ats.rpg.entities.InventorySlot;


public class HsqlInventorySlotDao extends DaoBase<InventorySlot> 
	implements InventorySlotDao {

	private Statement stmt;

	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement select;
	private PreparedStatement selectId;
	private PreparedStatement drop;
	
	
	public HsqlInventorySlotDao(HsqlUnitOfWork uow)
	{
		super(uow);
		try {
			Connection connection = uow.getConnection();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean exist = false;
			
			stmt = connection.createStatement();
			
			while(rs.next())
			{
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("InventorySlots"))
				{
					exist = true;
					break;
				}
			}
			if(!exist)
			{
				stmt.executeUpdate("CREATE TABLE InventorySlots("
						+ "id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 0),"
						+ "champion_id BIGINT NOT NULL FOREIGN KEY "
						+ "REFERENCES Champion(id) ON UPDATE CASCADE ON DELETE CASCADE,"
						+ "item_id BIGINT NOT NULL FOREIGN KEY "
						+ "REFERENCES Item(id) ON UPDATE CASCADE ON DELETE CASCADE"
						+ ")");
			}
			
			insert = connection.prepareStatement(""
					+ "insert into InventorySlots(item_id,champion_id) "
					+ "values (?,?)");
			
			update = connection.prepareStatement(""
					+ "update InventorySlots set"
					+ "(item_id,champion_id)=(?,?)"
					+ "where id=?");
			
			delete = connection.prepareStatement(""
					+ "delete from InventorySlots where id=?");
			
			selectId = connection.prepareStatement(""
					+ "select * from InventorySlots where id=?");
			
			select = connection.prepareStatement(""
					+ "select * from InventorySlots");
			
			drop = connection.prepareStatement(""
					+ "drop table InventorySlots");
			
		} catch (SQLException e) {			
			e.printStackTrace();
		}	
	}
	
	@Override
	public void persistAdd(EntityBase entity) {
	
		InventorySlot ent = (InventorySlot) entity;
		try 
		{
			insert.setLong(1, ent.getItem().getId());			// Not Null
			insert.setLong(2, ent.getChampion().getId());		// Not Null
			insert.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void persistDelete(EntityBase entity) {
		
		InventorySlot ent = (InventorySlot) entity;
		try 
		{
			delete.setLong(1, ent.getId());
			delete.executeUpdate();	
			
		} catch (SQLException e) {
			e.printStackTrace();
		}	
	}

	@Override
	public InventorySlot get(long id) {
		
		try {
			selectId.setLong(1, id);
			ResultSet rs = selectId.executeQuery();
			while(rs.next()) {
				InventorySlot i = new InventorySlot();
					i.setId(rs.getLong("id"));
				return i;
			}	
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	@Override
	public List<InventorySlot> getAll() {
		
		List<InventorySlot> inventorySlots = new ArrayList<InventorySlot>();
		
		try
		{
			ResultSet rs = select.executeQuery();
			
			while(rs.next()){
				InventorySlot i = get(rs.getLong("id"));
				inventorySlots.add(i);
			}
			return inventorySlots;
		}
		catch(Exception ex) {
			ex.printStackTrace();
		}
		
		return null;
	}

	@Override
	public void persistUpdate(EntityBase entity) {

		InventorySlot ent = (InventorySlot) entity;
		try
		{
			update.setLong(1, ent.getItem().getId());
			update.setLong(2, ent.getChampion().getId());
			update.setLong(3, ent.getId());
			update.executeUpdate();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}	
	}
	
	@Override
	public InventorySlot[] getInventorySlotsByChampionId(long id) {

		InventorySlot[] inventorySlots = new InventorySlot[6];
		
		try {
			ResultSet rs = select.executeQuery();
			int index = 0;
			while(rs.next()) {
				if(rs.getLong("champion_id") == id) {
					InventorySlot i = get(rs.getLong("id"));
					inventorySlots[index++] = i;
				}
			}
			return inventorySlots;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	@Override
	public List<InventorySlot> getInventorySlotsByItemId(long id) {

		List<InventorySlot> inventorySlots = new ArrayList<InventorySlot>();
		
		try {
			ResultSet rs = select.executeQuery();
			while(rs.next()) {
				if(rs.getLong("item_id") == id) {
					InventorySlot i = get(rs.getLong("id"));
					inventorySlots.add(i);
				}		
			}
			return inventorySlots;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void setChampion(InventorySlot i, ChampionDao dao) {
		try {
			selectId.setLong(1, i.getId());
			ResultSet rs = selectId.executeQuery();
			rs.next();
			i.setChampion(dao.get(rs.getLong("champion_id")));
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void setItem(InventorySlot i, ItemDao dao) {
		try {
			selectId.setLong(1, i.getId());
			ResultSet rs = selectId.executeQuery();
			rs.next();
			i.setItem(dao.get(rs.getLong("item_id")));
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void drop() {
		try {
			drop.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
}