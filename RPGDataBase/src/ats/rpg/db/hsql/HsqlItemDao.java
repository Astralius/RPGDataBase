package ats.rpg.db.hsql;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ats.rpg.db.DaoBase;
import ats.rpg.db.EntityBase;
import ats.rpg.db.dao.InventorySlotDao;
import ats.rpg.db.dao.ItemDao;
import ats.rpg.entities.InventorySlot;
import ats.rpg.entities.Item;
import ats.rpg.util.ItemType;


public class HsqlItemDao extends DaoBase<Item> implements ItemDao {

	private HsqlUnitOfWork uow;
	
	private Statement stmt;

	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement select;
	private PreparedStatement selectId;
	private PreparedStatement drop;
	
	InventorySlotDao inventoryDao;
	
	
	public HsqlItemDao(HsqlUnitOfWork uow)
	{
		super(uow);
		this.uow = uow;
		try {
			Connection connection = uow.getConnection();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean exist = false;
			
			stmt = connection.createStatement();
			
			while(rs.next())
			{
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("Item"))
				{
					exist = true;
					break;
				}
			}
			if(!exist)
			{
				stmt.executeUpdate("CREATE TABLE Item("
						+ "id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 0),"
						+ "name VARCHAR(50) NOT NULL,"
						+ "type VARCHAR(50) NOT NULL,"
						+ "price INT,"
						+ "damage INT,"
						+ "defense INT,"
						+ "MPbonus INT,"
						+ "UNIQUE(name,type)"
						+ ")");
			}
			
			insert = connection.prepareStatement(""
					+ "insert into Item(name,type,price,damage,defense,MPbonus) "
					+ "values (?,?,?,?,?,?)");
			
			update = connection.prepareStatement(""
					+ "update Item set"
					+ "(name,type,price,damage,defense,MPbonus)=(?,?,?,?,?,?)"
					+ "where id=?");
			
			delete = connection.prepareStatement(""
					+ "delete from Item where id=?");
			
			selectId = connection.prepareStatement(""
					+ "select * from Item where id=?");
			
			select = connection.prepareStatement(""
					+ "select * from Item");
			
			drop = connection.prepareStatement(""
					+ "drop table Item");
			
		} catch (SQLException e) {			
			e.printStackTrace();
		}	
	}
	
	@Override
	public void persistAdd(EntityBase entity) {
	
		Item ent = (Item) entity;
		try 
		{
			insert.setString(1, ent.getName());			// Not null
			insert.setString(2, ent.getType());			// Not null
			insert.setInt(3, ent.getPrice());
			insert.setInt(4, ent.getDamage());
			insert.setInt(5, ent.getDefense());
			insert.setInt(6, ent.getMpBonus());
			insert.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void persistDelete(EntityBase entity) {
		
		Item ent = (Item) entity;
		try 
		{
			delete.setLong(1, ent.getId());	
			delete.executeUpdate();	
			
		} catch (SQLException e) {
			e.printStackTrace();
		}	
	}

	@Override
	public Item get(long id) {
		
		try {
			selectId.setLong(1, id);
			ResultSet rs = selectId.executeQuery();
			while(rs.next()) {
				Item i = new Item();
					i.setId(rs.getLong("id"));
					i.setName(rs.getString("name"));
					i.setType(ItemType.valueOf(rs.getString("type")));
					i.setPrice(rs.getInt("price"));
					i.setDamage(rs.getInt("damage"));
					i.setDefense(rs.getInt("defense"));
					i.setMpbonus(rs.getInt("MPbonus"));
				return i;
			}	
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	@Override
	public List<Item> getAll() {
		
		List<Item> items = new ArrayList<Item>();
		
		try
		{
			ResultSet rs = select.executeQuery();
			
			while(rs.next()){
				Item i = get(rs.getLong("id"));
				items.add(i);
			}
			return items;
		}
		catch(Exception ex) {
			ex.printStackTrace();
		}
		
		return null;
	}

	@Override
	public void persistUpdate(EntityBase entity) {

		Item ent = (Item) entity;
		try
		{
			update.setString(1, ent.getName());
			update.setString(2, ent.getType());
			update.setInt(3, ent.getPrice());
			update.setInt(4, ent.getDamage());
			update.setInt(5, ent.getDefense());
			update.setInt(6, ent.getMpBonus());
			update.setLong(7, ent.getId());
			update.executeUpdate();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}	
	}

	@Override
	public void setInventorySlots(Item item) {
		inventoryDao = new HsqlInventorySlotDao(uow);
		item.setInventorySlots(inventoryDao.getInventorySlotsByItemId(item.getId()));
		for(InventorySlot i : item.getInventorySlots()){
			i.setItem(item);
		}
	}
	
	@Override
	public void drop() {
		try {
			drop.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
}