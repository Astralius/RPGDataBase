package ats.rpg.db.hsql;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ats.rpg.db.dao.AccountDao;
import ats.rpg.db.dao.ChampionDao;
import ats.rpg.db.dao.InventorySlotDao;
import ats.rpg.db.dao.PlaceDao;
import ats.rpg.entities.Champion;
import ats.rpg.util.Profession;


public class HsqlChampionDao extends HsqlDaoBase<Champion> implements ChampionDao {

	public HsqlChampionDao(HsqlUnitOfWork uow) {
		super(uow);
	}
	

	@Override
	public void setInventorySlots(Champion c, InventorySlotDao dao) {
		c.setInventorySlots(dao.getInventorySlotsByChampionId(c.getId()));
	}
	
	@Override
	public List<Champion> getChampionsByAccountId(long id) {
		
		List<Champion> champions = new ArrayList<Champion>();
		try {
			ResultSet rs = select.executeQuery();
			while(rs.next()) {
				if(rs.getLong("account_id") == id) {
					Champion c = get(rs.getLong("id"));
					champions.add(c);
				}
			}
			return champions;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<Champion> getChampionsByPlaceId(long id) {
		
		List<Champion> champions = new ArrayList<Champion>();
		try {
			ResultSet rs = select.executeQuery();
			while(rs.next()) {
				if(rs.getLong("place_id") == id) {
					Champion c = get(rs.getLong("id"));
					champions.add(c);
				}
			}
			return champions;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void setAccount(Champion c, AccountDao dao) {
		try {
			selectId.setLong(1, c.getId());
			ResultSet rs = selectId.executeQuery();
			rs.next();
			c.setAccount(dao.get(rs.getLong("account_id")));
			selectId.clearParameters();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void setPlace(Champion c, PlaceDao dao) {
		try {
			selectId.setLong(1, c.getId());
			ResultSet rs = selectId.executeQuery();
			rs.next();
			c.setPlace(dao.get(rs.getLong("place_id")));
			selectId.clearParameters();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	protected String getTableName() {
		return "Champion";
	}

	@Override
	protected String getCreateQuery() {
		return "CREATE TABLE Champion("
				+ "id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 0),"
				+ "name VARCHAR(50) NOT NULL UNIQUE,"
				+ "level INT,"
				+ "profession VARCHAR(50) NOT NULL,"
				+ "HP INT,"
				+ "MP INT,"
				+ "coins INT,"
				+ "account_id BIGINT NOT NULL FOREIGN KEY "
				+ "REFERENCES Account ON UPDATE CASCADE ON DELETE CASCADE,"
				+ "place_id BIGINT NOT NULL FOREIGN KEY "
				+ "REFERENCES Place ON UPDATE CASCADE ON DELETE CASCADE"
				+ ")";
	}

	@Override
	protected Champion build(ResultSet rs) throws SQLException {
		Champion c = new Champion();
			c.setId(rs.getLong("id"));
			c.setName(rs.getString("name"));
			c.setLevel(rs.getInt("level"));
			c.setProfession(Profession.valueOf(rs.getString("profession")));
			c.setHP(rs.getInt("HP"));
			c.setMP(rs.getInt("MP"));
			c.setCoins(rs.getInt("coins"));
		return c;
	}

	@Override
	protected String getInsertQuery() {
		return "insert into Champion(name,level,profession,HP,MP,coins,account_id,place_id) "
				+ "values (?,?,?,?,?,?,?,?)";
	}

	@Override
	protected void setInsertQuery(Champion ent) throws SQLException {
		insert.setString(1, ent.getName());				// Not null
		insert.setInt(2, ent.getLevel());
		insert.setString(3, ent.getProfession());		// Not null
		insert.setInt(4, ent.getHP());	
		insert.setInt(5, ent.getMP());
		insert.setInt(6, ent.getCoins());
		insert.setLong(7, ent.getAccount().getId());	// Not null
		insert.setLong(8, ent.getPlace().getId());		// Not null
	}

	@Override
	protected String getUpdateQuery() {
		return "update Champion set"
				+ "(name,level,profession,HP,MP,coins,account_id,place_id)=(?,?,?,?,?,?,?,?)"
				+ "where id=?";
	}

	@Override
	protected void setUpdateQuery(Champion ent) throws SQLException {
		update.setString(1, ent.getName());
		update.setInt(2, ent.getLevel());
		update.setString(3, ent.getProfession());
		update.setInt(4, ent.getHP());
		update.setInt(5, ent.getMP());
		update.setInt(6, ent.getCoins());
		update.setLong(7, ent.getPlace().getId());
		update.setLong(8, ent.getAccount().getId());
		update.setLong(9, ent.getId());
	}
	
}