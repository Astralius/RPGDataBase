package ats.rpg.db.hsql;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ats.rpg.db.DaoBase;
import ats.rpg.db.EntityBase;
import ats.rpg.db.dao.ChampionDao;
import ats.rpg.db.dao.PlaceDao;
import ats.rpg.entities.Place;


public class HsqlPlaceDao extends DaoBase<Place> implements PlaceDao {
	
	private Statement stmt;

	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement select;
	private PreparedStatement selectId;
	private PreparedStatement drop;
	
	
	public HsqlPlaceDao(HsqlUnitOfWork uow)
	{
		super(uow);
		try {
			Connection connection = uow.getConnection();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean exist = false;
			
			stmt = connection.createStatement();
			
			while(rs.next())
			{
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("Place"))
				{
					exist = true;
					break;
				}
			}
			if(!exist)
			{
				stmt.executeUpdate("CREATE TABLE Place("
						+ "id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 0),"
						+ "name VARCHAR(50) NOT NULL UNIQUE,"
						+ "HPmod REAL,"
						+ "MPmod REAL,"
						+ "reqLVL INT"
						+ ")");
			}
			
			insert = connection.prepareStatement(""
					+ "insert into Place(name,HPmod,MPmod,reqLVL) "
					+ "values (?,?,?,?)");
			
			update = connection.prepareStatement(""
					+ "update Place set"
					+ "(name,HPmod,MPmod,reqLVL)=(?,?,?,?)"
					+ "where id=?");
			
			delete = connection.prepareStatement(""
					+ "delete from Place where id=?");
			
			selectId = connection.prepareStatement(""
					+ "select * from Place where id=?");
			
			select = connection.prepareStatement(""
					+ "select * from Place");
			
			drop = connection.prepareStatement(""
					+ "drop table Place");
			
		} catch (SQLException e) {			
			e.printStackTrace();
		}	
	}
	
	@Override
	public void persistAdd(EntityBase entity) {
	
		Place ent = (Place) entity;
		try 
		{
			insert.setString(1, ent.getName());			// Not Null
			insert.setFloat(2, ent.getHPModifier());	
			insert.setFloat(3, ent.getMPModifier());
			insert.setInt(4, ent.getReqLvl());	
			insert.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void persistDelete(EntityBase entity) {
		
		Place ent = (Place) entity;
		try 
		{
			delete.setLong(1, ent.getId());	
			delete.executeUpdate();	
			
		} catch (SQLException e) {
			e.printStackTrace();
		}	
	}

	@Override
	public Place get(long id) {
		
		try {
			selectId.setLong(1, id);
			ResultSet rs = selectId.executeQuery();
			while(rs.next()) {
				Place p = new Place();
					p.setId(rs.getLong("id"));
					p.setName(rs.getString("name"));
					p.setHPModifier(rs.getFloat("HPmod"));
					p.setMPModifier(rs.getFloat("MPmod"));
					p.setReqLvl(rs.getInt("reqLVL"));
				return p;
			}	
		} catch (SQLException e) {
			e.printStackTrace();
		}	
		return null;
	}
	
	@Override
	public List<Place> getAll() {
		
		List<Place> places = new ArrayList<Place>();
		
		try
		{
			ResultSet rs = select.executeQuery();
			
			while(rs.next()){
				Place p = get(rs.getLong("id"));
				places.add(p);
			}
			return places;
		}
		catch(Exception ex) {
			ex.printStackTrace();
		}
		
		return null;
	}

	public void persistUpdate(EntityBase entity) {

		Place ent = (Place) entity;
		try
		{
			update.setString(1, ent.getName());
			update.setFloat(2, ent.getHPModifier());
			update.setFloat(3, ent.getMPModifier());
			update.setInt(4, ent.getReqLvl());
			update.setLong(5, ent.getId());
			update.executeUpdate();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}	
	}

	@Override
	public void setChampions(Place p, ChampionDao dao) {
		p.setChampions(dao.getChampionsByPlaceId(p.getId()));
	}

	@Override
	public void drop() {
		try {
			drop.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}